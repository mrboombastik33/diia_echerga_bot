import asyncio
import os
import logging
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from fetch import fetch_data
from additional import calc_time, parse_duration
from keyboard_markup import keyboard

from db.db_interaction import init_db, get_user_threshold, set_user_threshold, add_user_if_not_exists


load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

"""Hardcoded info about certain country"""
TARGET_ID = 17
COUNTRY_ID = 167

INTERVAL = 60 * 5

logging.basicConfig(level=logging.INFO)
bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

user_tasks = {}

class Cfg(StatesGroup):
    waiting_threshold = State()


async def send_periodic_data(user_id: int):
    while True:
        try:
            threshold = await get_user_threshold(user_id)
            entry = await fetch_data(country_id=COUNTRY_ID, target_id=TARGET_ID)

            if entry:
                if entry["wait_time"] > threshold:
                    text = (
                        "–ó–Ω–∞–π–¥–µ–Ω–æ:\n"
                        f"{entry['title']}\n"
                        f"–ß–µ—Ä–≥–∞ {'–Ω–µ ' if not entry['is_paused'] else ''}–∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è\n"
                        f"–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {calc_time(entry['wait_time'])}\n"
                        f"–ß–µ—Ä–≥–∞ –∞–≤—Ç–æ: {entry['vehicle_in_active_queues_counts']}"
                    )
                    for _ in range(10):
                        await bot.send_message(user_id, text)
                        await asyncio.sleep(10)
            else:
                await bot.send_message(user_id, "–û–±'—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            await asyncio.sleep(INTERVAL)

        except asyncio.CancelledError:
            logging.info(f"Task for user {user_id} cancelled.")
            break
        except Exception as exc:
            logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: %s", exc)



@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await add_user_if_not_exists(user_id)
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–æ—é –±–æ—Ç–∞", reply_markup=keyboard)

@dp.message(F.text == "üü¢ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
async def start_checking(message: Message):
    user_id = message.from_user.id
    await add_user_if_not_exists(user_id)
    task = user_tasks.get(user_id)
    if task and not task.done():
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return
    user_tasks[user_id] = asyncio.create_task(send_periodic_data(user_id))
    await message.answer("–ó–∞–ø—É—Å—Ç–∏–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –î–∞–Ω—ñ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å –∫–æ–∂–Ω—ñ "
                         f"{INTERVAL} —Å–µ–∫—É–Ω–¥.")

@dp.message(F.text == "üî¥ –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
async def stop_checking(message: Message):
    user_id = message.from_user.id
    task = user_tasks.get(user_id)
    if task and not task.done():
        task.cancel()
        user_tasks.pop(user_id, None)
        await message.answer("–ó—É–ø–∏–Ω–∏–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. ")
    else:
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")

@dp.message(F.text == "üü° –ß–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
async def set_threshold(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await add_user_if_not_exists(user_id)
    await stop_checking(message)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—ñ–≥ —É —Ñ–æ—Ä–º–∞—Ç—ñ ¬´10 –¥–Ω—ñ–≤ 7 –≥–æ–¥–∏–Ω 5 —Ö–≤–∏–ª–∏–Ω¬ª (10 7 5).")
    await state.set_state(Cfg.waiting_threshold)

@dp.message(Cfg.waiting_threshold)
async def save_threshold(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await add_user_if_not_exists(user_id)
    try:
        wait_threshold = parse_duration(message.text)
        await set_user_threshold(user_id, wait_threshold)
        await message.answer(f"–ù–æ–≤–∏–π –ø–æ—Ä—ñ–≥: {wait_threshold} —Å–µ–∫—É–Ω–¥.")
        await state.clear()
        await start_checking(message)
    except ValueError as err:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {err}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
